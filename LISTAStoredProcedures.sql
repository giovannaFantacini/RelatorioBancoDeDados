SET SERVEROUTPUT ON;
-- EX 1

CREATE OR REPLACE PROCEDURE SP_IMC(ALTURA FLOAT, PESO FLOAT) AS  
V_RESULT_IMC FLOAT;
BEGIN
    V_RESULT_IMC := PESO/POWER(ALTURA,2);
    V_RESULT_IMC := ROUND(V_RESULT_IMC, 5);
    CASE
        WHEN V_RESULT_IMC <= 19.0 THEN
            DBMS_OUTPUT.PUT_LINE('Subpeso, ' || V_RESULT_IMC);
        WHEN V_RESULT_IMC <= 25.0 THEN
            DBMS_OUTPUT.PUT_LINE('Peso Normal, ' || V_RESULT_IMC);
        WHEN V_RESULT_IMC <= 29.9 THEN
            DBMS_OUTPUT.PUT_LINE('Sobrepeso, ' || V_RESULT_IMC);
        ELSE
            DBMS_OUTPUT.PUT_LINE('Obesidade, ' || V_RESULT_IMC);
    END CASE;
END;

DECLARE
    V_ALTURA FLOAT;
    V_PESO FLOAT;
BEGIN
    V_ALTURA := 1.87;
    V_PESO := 150;
    SP_IMC(V_ALTURA, V_PESO);
END;

-- EX 2

CREATE OR REPLACE PROCEDURE SP_NUMEROSPARES(PRIMEIRO NUMBER, ULTIMO NUMBER, RESULTADO IN OUT NUMBER) AS
BEGIN
    FOR VALOR IN PRIMEIRO .. ULTIMO LOOP
        IF MOD(VALOR, 2) = 0 THEN
            RESULTADO := VALOR + RESULTADO;
        END IF;
    END LOOP;
END;

DECLARE
    X NUMBER := 0;
BEGIN
   SP_NUMEROSPARES(0, 100, X);
   DBMS_OUTPUT.PUT_LINE(X);
END;

-- EX 3

CREATE OR REPLACE PROCEDURE SP_ANOSBISSEXTOS(ANOINICIO NUMBER, ANOFIM NUMBER) AS
BEGIN
    FOR ANO IN ANOINICIO .. ANOFIM LOOP
        IF ((MOD(ANO, 4) = 0 AND MOD(ANO, 100) <> 0) OR MOD(ANO,400) = 0) THEN
            DBMS_OUTPUT.PUT_LINE(ANO);
        END IF;
    END LOOP;
END;

EXECUTE SP_ANOSBISSEXTOS(2000, 2100);

-- EX 5

CREATE OR REPLACE FUNCTION SF_VERIFICAPRIMO(NUMERO NUMBER) RETURN NUMBER AS
VERIFICA NUMBER := 1;
BEGIN
    IF MOD(NUMERO, 2) = 0 THEN
        VERIFICA := 0;
    ELSE
        FOR VALOR IN 3 .. NUMERO/2 LOOP
            IF MOD(NUMERO, VALOR) = 0 THEN
                VERIFICA := 0;
                EXIT;  
            END IF;
        END LOOP;
    END IF;
    RETURN VERIFICA; 
END;

SELECT SF_VERIFICAPRIMO(7) FROM DUAL;
SELECT SF_VERIFICAPRIMO(10) FROM DUAL;
SELECT SF_VERIFICAPRIMO(9) FROM DUAL;

-- EX 6

CREATE OR REPLACE FUNCTION SF_CONVERTE_FC(TEMP_F NUMBER) RETURN NUMBER AS
TEMP_C NUMBER;
BEGIN
    TEMP_C := (TEMP_F - 32)/1.8;
    RETURN TEMP_C; 
END;

SELECT SF_CONVERTE_FC(72) FROM DUAL;
SELECT SF_CONVERTE_FC(40) FROM DUAL;


-- EX 7 

CREATE OR REPLACE FUNCTION SF_ENCONTRA_DISCIPLINA(P_COD_DISCIPLINA VARCHAR2) RETURN VARCHAR2 AS
DIS_PROF VARCHAR2(100);
N_DISCIPLINA DISCIPLINA.nome_disciplina%TYPE;
N_PROFESSOR PROFESSOR.nome_professor%TYPE;
BEGIN
    SELECT NOME_PROFESSOR, NOME_DISCIPLINA 
        INTO N_PROFESSOR, N_DISCIPLINA
        FROM PROFESSOR P, DISCIPLINA D
        WHERE D.COD_DISCIPLINA = P_COD_DISCIPLINA AND
        D.ID_PROFESSOR = P.ID_PROFESSOR;
    DIS_PROF := N_PROFESSOR;
    RETURN DIS_PROF;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(SF_ENCONTRA_DISCIPLINA('BD1'));
END;


-- EX 8
-- ALUNO
CREATE SEQUENCE SEQ_ALUNO START WITH 8;

CREATE OR REPLACE PROCEDURE ADD_ALUNO(
    P_COD_ALUNO ALUNO.COD_ALUNO%TYPE,
    P_NOME_ALUNO ALUNO.NOME_ALUNO%TYPE,
    P_IDADE ALUNO.IDADE%TYPE,
    P_ID_CIDADE ALUNO.ID_CIDADE%TYPE) IS
BEGIN
    INSERT INTO ALUNO (ID_ALUNO, COD_ALUNO, NOME_ALUNO, IDADE, ID_CIDADE) 
        VALUES (SEQ_ALUNO.NEXTVAL, P_COD_ALUNO, P_NOME_ALUNO, P_IDADE, P_ID_CIDADE);
END;

EXEC ADD_ALUNO('3008134', 'GIOVANNA', 21, 2);

-- PROFESSOR

CREATE SEQUENCE SEQ_PROFESSOR START WITH 5;

CREATE OR REPLACE PROCEDURE ADD_PROFESSOR(
    P_COD_PROFESSOR PROFESSOR.COD_PROFESSOR%TYPE,
    P_NOME_PROFESSOR PROFESSOR.NOME_PROFESSOR%TYPE,
    P_ID_CIDADE PROFESSOR.ID_PROFESSOR%TYPE) IS
BEGIN
    INSERT INTO PROFESSOR (ID_PROFESSOR, COD_PROFESSOR, NOME_PROFESSOR, ID_CIDADE) 
        VALUES (SEQ_PROFESSOR.NEXTVAL, P_COD_PROFESSOR, P_NOME_PROFESSOR, P_ID_CIDADE);
END;

EXEC ADD_PROFESSOR('P005', 'MURILO', 7);
COMMIT;

-- DISCIPLINA 

CREATE SEQUENCE SEQ_DISCIPLINA START WITH 8;

CREATE OR REPLACE PROCEDURE ADD_DISCIPLINA(
    P_COD_DISCIPLINA DISCIPLINA.COD_DISCIPLINA%TYPE,
    P_NOME_DISCIPLINA DISCIPLINA.NOME_DISCIPLINA%TYPE,
    P_ID_PROFESSOR DISCIPLINA.ID_PROFESSOR%TYPE) IS
BEGIN
    INSERT INTO DISCIPLINA (ID_DISCIPLINA, COD_DISCIPLINA, NOME_DISCIPLINA, ID_PROFESSOR) 
        VALUES (SEQ_DISCIPLINA.NEXTVAL, P_COD_DISCIPLINA, P_NOME_DISCIPLINA, P_ID_PROFESSOR);
END;

EXEC ADD_DISCIPLINA('PDIE', 'PROCESSAMENTO DIGITAL DE IMAGEM', 5);

-- AVALIACAO

CREATE SEQUENCE SEQ_AVALIACAO START WITH 22;

CREATE OR REPLACE PROCEDURE ADD_AVALIACAO(
    P_COD_AVALIACAO AVALIACAO.COD_AVALIACAO%TYPE,
    P_DESCRICAO AVALIACAO.DESCRICAO%TYPE,
    P_ID_DISCIPLINA AVALIACAO.ID_DISCIPLINA%TYPE) IS
BEGIN
    INSERT INTO AVALIACAO (ID_AVALIACAO, COD_AVALIACAO, DESCRICAO, ID_DISCIPLINA) 
        VALUES (SEQ_AVALIACAO.NEXTVAL, P_COD_AVALIACAO, P_DESCRICAO, P_ID_DISCIPLINA);
END;

EXEC ADD_AVALIACAO('AVAL1 - PDIE', 'AVALIACAO 1', 10);

-- ALUNO_DISCIPINA

CREATE SEQUENCE SEQ_ALUNO_DISCIPLINA START WITH 26;

CREATE OR REPLACE PROCEDURE ADD_ALUNO_DISCIPLINA(
    P_PERIODO ALUNO_DISCIPLINA.PERIODO%TYPE,
    P_ID_ALUNO ALUNO_DISCIPLINA.ID_ALUNO%TYPE,
    P_ID_DISCIPLINA ALUNO_DISCIPLINA.ID_DISCIPLINA%TYPE) IS
BEGIN
    INSERT INTO ALUNO_DISCIPLINA (ID_ALUNO_DISCIPLINA, PERIODO, ID_ALUNO, ID_DISCIPLINA) 
        VALUES (SEQ_ALUNO_DISCIPLINA.NEXTVAL, P_PERIODO, P_ID_ALUNO, P_ID_DISCIPLINA);
END;

EXEC ADD_ALUNO_DISCIPLINA(1, 9, 10);

-- ALUNO AVALIACAO

CREATE SEQUENCE SEQ_ALUNO_AVALIACAO START WITH 76;

CREATE OR REPLACE PROCEDURE ADD_ALUNO_AVALIACAO(
    P_NOTA ALUNO_AVALIACAO.NOTA%TYPE,
    P_ID_ALUNO ALUNO_AVALIACAO.ID_ALUNO%TYPE,
    P_ID_AVALIACAO ALUNO_AVALIACAO.ID_AVALIACAO%TYPE) IS
BEGIN
    INSERT INTO ALUNO_AVALIACAO (ID_ALUNO_AVALIACAO, NOTA, ID_ALUNO, ID_AVALIACAO) 
        VALUES (SEQ_ALUNO_AVALIACAO.NEXTVAL, P_NOTA, P_ID_ALUNO, P_ID_AVALIACAO);
END;

EXEC ADD_ALUNO_AVALIACAO(10, 9, 23);

