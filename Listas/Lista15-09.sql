--EX 6
-- Criação da Tabela e inserção dos dados 

DROP TABLE CLIENTE;

CREATE TABLE CLIENTE (COD_CLI INTEGER NOT NULL CONSTRAINT PK_COD PRIMARY KEY,
                      NOME_CLI VARCHAR2(50) NOT NULL,
                      EMAIL_CLI VARCHAR2(50) NOT NULL);

INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (1, 'João Silva', 'joao@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (2, 'Maria Santos', 'maria@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (3, 'Pedro Oliveira', 'pedro@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (4, 'Ana Pereira', 'ana@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (5, 'Carlos Fernandes', 'carlos@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (6, 'Sofia Mendes', 'sofia@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (7, 'Miguel Rodrigues', 'miguel@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (8, 'Isabel Sousa', 'isabel@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (9, 'Ricardo Pereira', 'ricardo@email.com');
INSERT INTO CLIENTE (COD_CLI, NOME_CLI, EMAIL_CLI) VALUES (10, 'Beatriz Bernardes', 'bb@dominio.com.br');

-- Procedure

DECLARE
    v_nome_cli CLIENTE.NOME_CLI%TYPE;
    v_email_cli CLIENTE.EMAIL_CLI%TYPE;
    
    PROCEDURE descobre_cliente(p_cod_cli NUMBER, p_nome_cli OUT CLIENTE.NOME_CLI%TYPE, p_email_cli OUT CLIENTE.EMAIL_CLI%TYPE) IS
    BEGIN
        SELECT NOME_CLI, EMAIL_CLI
        INTO  p_nome_cli, p_email_cli
        FROM CLIENTE C
        WHERE C.COD_CLI = p_cod_cli;
    END;

BEGIN   
    descobre_cliente(10, v_nome_cli, v_email_cli);
    DBMS_OUTPUT.PUT_LINE('Codigo: 10');
    DBMS_OUTPUT.PUT_LINE('Nome Cliente: ' || v_nome_cli);
    DBMS_OUTPUT.PUT_LINE('Email Cliente: ' || v_email_cli);
    descobre_cliente(5, v_nome_cli, v_email_cli);
    DBMS_OUTPUT.PUT_LINE('Codigo: 5');
    DBMS_OUTPUT.PUT_LINE('Nome Cliente: ' || v_nome_cli);
    DBMS_OUTPUT.PUT_LINE('Email Cliente: ' || v_email_cli);
    descobre_cliente(8, v_nome_cli, v_email_cli);
    DBMS_OUTPUT.PUT_LINE('Codigo: 8');
    DBMS_OUTPUT.PUT_LINE('Nome Cliente: ' || v_nome_cli);
    DBMS_OUTPUT.PUT_LINE('Email Cliente: ' || v_email_cli);
END;


-- Ex 7
-- Criação da Tabela

CREATE TABLE Aluno2 (RA INTEGER NOT NULL CONSTRAINT PK_RA PRIMARY KEY,
                      NOME VARCHAR2(50) NOT NULL,
                      A1 FLOAT NOT NULL,
                      A2 FLOAT NOT NULL,
                      A3 FLOAT NOT NULL,
                      A4 FLOAT NOT NULL,
                      MEDIA FLOAT NOT NULL,
                      RESULTADO VARCHAR2(50) NOT NULL);

-- Procedure

DECLARE

    FUNCTION CALCULA_MEDIA(P_A FLOAT, P_A3 ALUNO2.A3%TYPE, P_A4 ALUNO2.A4%TYPE) RETURN FLOAT IS
    BEGIN
        RETURN ((P_A + P_A3 + P_A4)/3);
    END;
        
    PROCEDURE INSERT_ALUNO(P_RA ALUNO2.RA%TYPE, P_NOME ALUNO2.NOME%TYPE, P_A1 ALUNO2.A1%TYPE, P_A2 ALUNO2.A2%TYPE, P_A3 ALUNO2.A3%TYPE,
                            P_A4 ALUNO2.A4%TYPE, P_MEDIA ALUNO2.MEDIA%TYPE, P_RESULTADO ALUNO2.RESULTADO%TYPE) IS
    BEGIN
        INSERT INTO ALUNO2 (RA, NOME, A1, A2, A3, A4, MEDIA, RESULTADO) VALUES 
        (P_RA, P_NOME, P_A1, P_A2, P_A3, P_A4, P_MEDIA, P_RESULTADO);
    END;
        
    PROCEDURE VERIFICA_APROVACAO(P_RA ALUNO2.RA%TYPE, P_NOME ALUNO2.NOME%TYPE, P_A1 ALUNO2.A1%TYPE, P_A2 ALUNO2.A2%TYPE, 
                                 P_A3 ALUNO2.A3%TYPE, P_A4 ALUNO2.A4%TYPE) IS
    V_MEDIA FLOAT;
    V_RESULTADO ALUNO2.RESULTADO%TYPE;
    BEGIN
        IF P_A1 > P_A2 THEN
            V_MEDIA := CALCULA_MEDIA(P_A1, P_A3, P_A4);
        ELSE 
            V_MEDIA := CALCULA_MEDIA(P_A2, P_A3, P_A4);
        END IF; 
        
        IF V_MEDIA < 6 THEN
            V_RESULTADO := 'REPROVADO';
        ELSE 
            V_RESULTADO := 'APROVADO';
        END IF;
        
        INSERT_ALUNO(P_RA, P_NOME, P_A1, P_A2, P_A3, P_A4, V_MEDIA, V_RESULTADO);
        
    END;

BEGIN

    VERIFICA_APROVACAO(123, 'ANTONIO ALVES', 6.5, 3.5, 9.5, 5.0);
    VERIFICA_APROVACAO(456, 'JOAO ALVES', 2.5, 3.5, 9.5, 5.0);

END;

-- CONFERENCIA INSERT

SELECT * FROM ALUNO2;

--EX 8 
-- Criação da Tabela e inserção dos dados 

CREATE TABLE ALIQUOTA (COD_CAT VARCHAR(2) NOT NULL CONSTRAINT PK_COD_CAT PRIMARY KEY,
                       IPI INTEGER NOT NULL);

CREATE TABLE PRODUTO(COD_PROD INTEGER NOT NULL CONSTRAINT PK_COD_PROD PRIMARY KEY,
                    VALOR FLOAT NOT NULL,
                    COD_CAT VARCHAR(2) NOT NULL,
                    CONSTRAINT FK_COD_CAT FOREIGN KEY (COD_CAT) REFERENCES ALIQUOTA);

INSERT INTO ALIQUOTA (COD_CAT, IPI) VALUES('A', 10);
INSERT INTO ALIQUOTA (COD_CAT, IPI) VALUES('B', 15);

INSERT INTO PRODUTO(COD_PROD, VALOR, COD_CAT)  VALUES(1001, 120.00, 'A' );
INSERT INTO PRODUTO(COD_PROD, VALOR, COD_CAT)  VALUES(1002, 250.00, 'B' );

-- PROCEDURE

DECLARE
    V_VALOR_IPI FLOAT;

    PROCEDURE CALCULO_IPI(P_COD PRODUTO.COD_PROD%TYPE, P_VALOR_IPI OUT FLOAT) IS
    V_IPI INTEGER;
    V_PROD FLOAT;
    BEGIN
        SELECT A.IPI, P.VALOR INTO V_IPI, V_PROD FROM ALIQUOTA A, PRODUTO P
        WHERE P.COD_PROD = P_COD AND 
        P.COD_CAT = A.COD_CAT;
        
        P_VALOR_IPI := V_PROD*(V_IPI/100);
    END;

BEGIN
    CALCULO_IPI(1001, V_VALOR_IPI);
    DBMS_OUTPUT.PUT_LINE('VALOR DO IPI PARA O PRODUTO: ' || V_VALOR_IPI);
    CALCULO_IPI(1002, V_VALOR_IPI);
    DBMS_OUTPUT.PUT_LINE('VALOR DO IPI PARA O PRODUTO: ' || V_VALOR_IPI);
    
END;

--EX 9
-- Criação da Tabela e inserção dos dados 

CREATE TABLE LUCRO (ANO INTEGER NOT NULL CONSTRAINT PK_ANO PRIMARY KEY,
                    VALOR FLOAT NOT NULL);
                    
CREATE TABLE SALARIO (MATRICULA INTEGER NOT NULL CONSTRAINT PK_MAT PRIMARY KEY,
                    VALOR FLOAT NOT NULL);
                    
INSERT INTO LUCRO(ANO, VALOR) VALUES(2007, 1200000);
INSERT INTO LUCRO(ANO, VALOR) VALUES(2008, 1500000);
INSERT INTO LUCRO(ANO, VALOR) VALUES(2009, 1400000);

INSERT INTO SALARIO(MATRICULA, VALOR) VALUES(1001, 2500);
INSERT INTO SALARIO(MATRICULA, VALOR) VALUES(1002, 3200);

DECLARE 
    V_BONUS FLOAT;

    PROCEDURE CALCULO_BONUS(P_ANO LUCRO.ANO%TYPE, P_MATRICULA SALARIO.MATRICULA%TYPE, P_BONUS OUT FLOAT) IS
    V_LUCRO LUCRO.VALOR%TYPE;
    V_SALARIO SALARIO.VALOR%TYPE;
    BEGIN
        SELECT L.VALOR, S.VALOR INTO V_LUCRO, V_SALARIO
        FROM LUCRO L, SALARIO S
        WHERE L.ANO = P_ANO AND S.MATRICULA = P_MATRICULA;
        
        P_BONUS := V_LUCRO*0.01 + V_SALARIO*0.05;
    END;
BEGIN

    CALCULO_BONUS(2008, 1001, V_BONUS);
    DBMS_OUTPUT.PUT_LINE('PARA O FUNCIONARIO DE MATRICULA 1001, NO ANO 2008, SEU BONUS FOI ' || V_BONUS);
    CALCULO_BONUS(2007, 1002, V_BONUS);
    DBMS_OUTPUT.PUT_LINE('PARA O FUNCIONARIO DE MATRICULA 1002, NO ANO 2007, SEU BONUS FOI ' || V_BONUS);

END;

-- EX 10

DECLARE 
    V_VALID_PRIMO VARCHAR(3);
    
    FUNCTION VERIFICA_PRIMO(P_VALOR INT)RETURN VARCHAR IS
    P_VALID_PRIMO VARCHAR(3);
    BEGIN
        P_VALID_PRIMO := 'SIM';
        IF ((MOD(P_VALOR,2) = 0) AND P_VALOR != 2) THEN
            P_VALID_PRIMO := 'NAO';
        ELSE
            FOR V_COUNTER IN 3 .. P_VALOR/2 LOOP
                IF (MOD(P_VALOR,V_COUNTER ) = 0) THEN 
                    P_VALID_PRIMO := 'NAO';
                   -- BREAK;
                END IF;
            END LOOP;
        END IF;    
        RETURN P_VALID_PRIMO;
    END;
BEGIN

     V_VALID_PRIMO := VERIFICA_PRIMO(2);
     DBMS_OUTPUT.PUT_LINE('O NUMERO 2 É PRIMO: ' || V_VALID_PRIMO);
     V_VALID_PRIMO := VERIFICA_PRIMO(4);
     DBMS_OUTPUT.PUT_LINE('O NUMERO 4 É PRIMO: ' || V_VALID_PRIMO);
     V_VALID_PRIMO := VERIFICA_PRIMO(13);
     DBMS_OUTPUT.PUT_LINE('O NUMERO 13 É PRIMO: ' || V_VALID_PRIMO);
END;

-- EX 11

DECLARE
    V_TEMP_C FLOAT;
    
    FUNCTION TEM_F_PARA_C(P_TEMP_F INT) RETURN FLOAT IS
    BEGIN
        RETURN (P_TEMP_F - 32)/1.8;
    END;
BEGIN 

     V_TEMP_C := TEM_F_PARA_C(75);
     DBMS_OUTPUT.PUT_LINE('75F = ' || ROUND(V_TEMP_C,2) || 'C');
     V_TEMP_C := TEM_F_PARA_C(98);
     DBMS_OUTPUT.PUT_LINE('98F = ' || ROUND(V_TEMP_C,2)|| 'C');
     V_TEMP_C := TEM_F_PARA_C(100);
     DBMS_OUTPUT.PUT_LINE('100F = ' || ROUND(V_TEMP_C,2)|| 'C');

END;

--EX 12
-- Criação da Tabela e inserção dos dados 

CREATE TABLE DEPARTAMENTO (COD_DEPTO INTEGER NOT NULL CONSTRAINT PK_COD_DEPTO PRIMARY KEY,
                           NOME_DEPTO VARCHAR(50) NOT NULL);

CREATE TABLE FUNCIONARIO(MATRICULA INTEGER NOT NULL CONSTRAINT PK_MATRICULA PRIMARY KEY,
                         NOME VARCHAR(50) NOT NULL,
                         COD_DEPTO INTEGER NOT NULL,
                         CONSTRAINT FK_COD_DEPTO FOREIGN KEY (COD_DEPTO) REFERENCES DEPARTAMENTO);
                    
INSERT INTO DEPARTAMENTO(COD_DEPTO, NOME_DEPTO) VALUES(1, 'ENGENHARIA');
INSERT INTO DEPARTAMENTO(COD_DEPTO, NOME_DEPTO) VALUES(2, 'INFORMATICA');


INSERT INTO FUNCIONARIO(MATRICULA,NOME,COD_DEPTO) VALUES(1001, 'ANTONIO', 1);
INSERT INTO FUNCIONARIO(MATRICULA,NOME,COD_DEPTO) VALUES(1002, 'BEATRIZ', 2);
INSERT INTO FUNCIONARIO(MATRICULA,NOME,COD_DEPTO) VALUES(1003, 'CLAUDIO', 1);

-- FUNCTION

DECLARE
    V_NOME FUNCIONARIO.NOME%TYPE;
    V_DEPT DEPARTAMENTO.NOME_DEPTO%TYPE;
    
    FUNCTION FIND_FUNC_DEPT(P_MATRICULA FUNCIONARIO.MATRICULA%TYPE, P_NOME_FUNC OUT FUNCIONARIO.NOME%TYPE) 
    RETURN VARCHAR IS
    P_NOME_DEPT DEPARTAMENTO.NOME_DEPTO%TYPE;
    BEGIN
        SELECT NOME_DEPTO, NOME INTO P_NOME_DEPT, P_NOME_FUNC 
        FROM DEPARTAMENTO D, FUNCIONARIO F
        WHERE F.MATRICULA = P_MATRICULA AND F.COD_DEPTO = D.COD_DEPTO;        
        RETURN P_NOME_DEPT;
    END;
BEGIN 

     V_DEPT := FIND_FUNC_DEPT(1001, V_NOME);
     DBMS_OUTPUT.PUT_LINE('FUNCIONARIO: ' || V_NOME || '  DEPARTAMENTO: ' || V_DEPT);
     V_DEPT := FIND_FUNC_DEPT(1002, V_NOME);
     DBMS_OUTPUT.PUT_LINE('FUNCIONARIO: ' || V_NOME || '  DEPARTAMENTO: ' || V_DEPT);
     V_DEPT := FIND_FUNC_DEPT(1003, V_NOME);
     DBMS_OUTPUT.PUT_LINE('FUNCIONARIO: ' || V_NOME || '  DEPARTAMENTO: ' || V_DEPT);

END;

